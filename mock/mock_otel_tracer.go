// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hafizarrDev/go-opentelemetry-dev (interfaces: OtelTracer)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOtelTracer is a mock of OtelTracer interface.
type MockOtelTracer struct {
	ctrl     *gomock.Controller
	recorder *MockOtelTracerMockRecorder
}

// MockOtelTracerMockRecorder is the mock recorder for MockOtelTracer.
type MockOtelTracerMockRecorder struct {
	mock *MockOtelTracer
}

// NewMockOtelTracer creates a new mock instance.
func NewMockOtelTracer(ctrl *gomock.Controller) *MockOtelTracer {
	mock := &MockOtelTracer{ctrl: ctrl}
	mock.recorder = &MockOtelTracerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOtelTracer) EXPECT() *MockOtelTracerMockRecorder {
	return m.recorder
}

// SetTraceProviderJaeger mocks base method.
func (m *MockOtelTracer) SetTraceProviderJaeger() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTraceProviderJaeger")
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTraceProviderJaeger indicates an expected call of SetTraceProviderJaeger.
func (mr *MockOtelTracerMockRecorder) SetTraceProviderJaeger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTraceProviderJaeger", reflect.TypeOf((*MockOtelTracer)(nil).SetTraceProviderJaeger))
}

// SetTraceProviderNewRelic mocks base method.
func (m *MockOtelTracer) SetTraceProviderNewRelic(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTraceProviderNewRelic", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTraceProviderNewRelic indicates an expected call of SetTraceProviderNewRelic.
func (mr *MockOtelTracerMockRecorder) SetTraceProviderNewRelic(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTraceProviderNewRelic", reflect.TypeOf((*MockOtelTracer)(nil).SetTraceProviderNewRelic), arg0)
}
